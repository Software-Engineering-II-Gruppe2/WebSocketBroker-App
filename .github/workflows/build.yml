name: SonarQube

on:
  push:
    branches:
      - main
      - fix/SonarcloudCoverage
  pull_request:
    types: [opened, synchronize, reopened]

env:
  ANDROID_ARCH: x86_64
  ANDROID_TARGET: google_apis_playstore
  API_LEVEL: 33
  ANDROID_BUILD_TOOLS_VERSION: 33.0.2
  # Install system image, platforms, build tools, platform tools, and emulator.
  ANDROID_SDK_PACKAGES: system-images;android-33;google_apis_playstore;x86_64 platforms;android-33 build-tools;33.0.2 platform-tools emulator
  EMULATOR_TIMEOUT: 350
  EMULATOR_NAME: nexus

jobs:
  build:
    name: Build, test, and analyze with SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      # Set up Android SDK (and add the Android tools to the PATH)
      - name: Set up Android SDK environment variables
        run: |
          echo "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/emulator:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/${ANDROID_BUILD_TOOLS_VERSION}" >> $GITHUB_PATH

      - name: Install Android SDK packages and accept licenses
        run: |
          yes | sdkmanager --licenses
          sdkmanager --install ${ANDROID_SDK_PACKAGES}

      - name: Create AVD
        run: |
          echo "no" | avdmanager --verbose create avd --force -n $EMULATOR_NAME --abi "${ANDROID_TARGET}/${ANDROID_ARCH}" -k "system-images;android-${API_LEVEL};${ANDROID_TARGET};${ANDROID_ARCH}"

      - name: Launch Android emulator
        run: |
          # Give execute permission to your emulator startup script if needed
          chmod +x ./start_emu_headless.sh
          # Launch emulator headless
          EMULATOR_TIMEOUT=${EMULATOR_TIMEOUT} EMULATOR_NAME=${EMULATOR_NAME} ./start_emu_headless.sh
          # Optional: wait a few extra seconds to ensure the emulator is fully booted.
          adb wait-for-device
          adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'

      # Continue with the rest of your build steps
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Load Google Service file
        env:
          DATA: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $DATA | base64 -di > app/google-services.json

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      # Run the instrumentation tests (this now finds a running emulator)
      - name: Run connected tests
        run: ./gradlew connectedDebugAndroidTest

      # Generate the Jacoco coverage reports after tests have run
      - name: Generate coverage reports
        run: ./gradlew jacocoUnitTestReport jacocoAndroidTestReport

      - name: Build and analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar --info --warning-mode all
